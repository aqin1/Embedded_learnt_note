Makefile
{
	Makefile基本格式：
	{
		target: prerequisites
		command
	}
	prerequisites 是依赖关系文件，即生产 target 所需要的文件或者目标。

	Makefile伪目标：.PHONY:标签
	伪目标是一个标签，这个目标只执行命令，不创建目标，还能避免目标与工作目录下的实际文件名冲突。
	clean 伪目标的命令为“-rm”，在 rm 命令前加了“-”，含义是如果这条命令执行失败，
	make 将忽略这个错误，继续往下执行；如果不加“-”，则 make 会停止。

	变量的定义和赋值方法：VAR = value
	变量的引用：通过 $() 可以引用变量，如 $(VAR)
	可以一个变量赋多个值，如 SRC = hello.c hello1.c hello2.c
	还可以追加变量的值 如 SRC += hello1.c
	可以用 换行符（\）换行

	注释方法：注释行以井号（ #）开始并 “顶格”

	Makefile自动变量

	makefile通配符：%

	= 是基本的赋值方式
	：= 覆盖之前的值
	？=如果没有赋值就赋予等号后面的值
	+= 添加后面的值，并不覆盖原有的值
	符号“=”表示引用右边变量的最新值，递归展开，符号“:=”表示引用右边变量的不超过引用位置的最新值，直接展开，符号“?=”表示左边变量未定义时才进行赋值，符号“+=”表示追加变量值，关键字define与endef中间的内容可以理解为定义了一个组合命令或函数。

	如果你的当前环境中定义了环境变量MAKEFILES，那么，make会把这个变量中的值做一个类似于include的动作(所有的Makefile都会受到它的影响)。这个变量中的值是其它的Makefile，用空格分隔。只是，它和include不同的是，从这个环境变中引入的Makefile的“目标”不会起作用，如果环境变量中定义的文件发现错误，make也会不理。

	makefile执行流程：
	1.  读入所有的Makefile。
	2.  读入被include的其它Makefile。
	3.  初始化文件中的变量。
	4.  推导隐晦规则，并分析所有规则。
	5.  为所有的目标文件创建依赖关系链。
	6.  根据依赖关系，决定哪些目标要重新生成。
	7.  执行生成命令。

	objects := $(wildcard *.o)	//变量定义中使用的通配符不会被统配处理，所以要使用 wildcard 函数

	VPATH = src:../headers // VPATH 变量用于指定makefile的文件目录(如源文件)，否则makefile只在当前目录寻找文件，不同目录间用 ":" 隔开

	vpath 关键字：灵活指定文件目录的关键字
	1. vpath < pattern> < directories>  为符合模式< pattern>的文件指定搜索目录<directories>。
	2. vpath < pattern>      清除符合模式< pattern>的文件的搜索目录。
	3. vpath       清除所有已被设置好了的文件搜索目录。
	例，vpath %.h ../headers
	“pattern”表示了具有相同特征的一类文件，所以需要使用 “ % ”

	Makefile 中，一个目标可以出现在多个规则中。但是这些规
	则必须是同一类型的规则，要么都是普通规则，要么都是双冒号规则。而不允许一个目
	标同时出现在两种不同类型的规则中

	普通规则：Makefile 中，一个文件可以作为多个规则的目标（多个规则中只能有一个规则定义
	命令，否则会报错）。这种情况时，以这个文件为目标的规则的所有依赖文件将会被合并成此目标一
	个依赖文件列表，当其中任何一个依赖文件比目标更新（比较目标文件和依赖文件的时
	间戳）时， make 将会执行特定的命令来重建这个目标。

	当同一个文件作为多个双冒号规则的目标时。这些不同的规则会被独立的处理，
	而不是像普通规则那样合并所有的依赖到一个目标文件。这就意味着对这些规
	则的处理就像多个不同的普通规则一样。就是说多个双冒号规则中的每一个的
	依赖文件被改变之后， make 只执行此规则定义的命令，而其它的以这个文件作
	为目标的双冒号规则将不会被执行。
	例：
	Newprog :: foo.c
		$(CC) $(CFLAGS) $< -o $@
	Newprog :: bar.c
		$(CC) $(CFLAGS) $< -o $@
	若“ foo.c”被修改，执行 make 以后将根据“ foo.c”文件重建目标“ Newprog”。
	而若“ bar.c”被修改那么“ Newprog”将根据“ bar.c”被重建。若foo.c、bar.c均被修改，则执行两个规则的命令

	对于一个已经定义的变量，可以使用“替换引用”将其值中的后缀字符（串）使用
	指定的字符（字符串）替换。格式为“ $(VAR:A=B)”（或者“ ${VAR:A=B}”），意思是，
	替换变量“ VAR”中所有“ A”字符结尾的字替换为“ B”结尾的字。“结尾”的含义是空格
	之前（变量值多个字之间使用空格分开）。而对于变量其它部分的“ A”字符不进行替
	换。例如：
	foo := a.o b.o c.o
	bar := $(foo:.o=.c)
	将变量 foo 中的 *.o 替换为 *.c ，所以 foo = a.c b.c c.c

	“@”：执行make命令时，默认会把Makefile中的命令输出到屏幕，如果不想要这样的输出时，可以在Makefile文件中的命令前添加“@”符号，对应的命令就不会输出到屏幕。
	“-”：在bash中执行命令时，都有一个回传码，0表示命令正确执行。前面我们介绍过减号“-”的用法，在一个命令的前面，表示这个命令出错时忽略出错信息，继续执行其它的命令。
	“$”：在Makefile中美元符号“$”随处可见，访问变量或者调用函数，当使用真实的美元符号时，类似于转义字符，形式为“$$”。
	“+”：有时候，在命令前面还有个加号，命令行前的“+”的意思是告诉make，即使make使用了“-t”参数，“+”之后的命令都需要被执行。注：“-t”选项用来更新所有目标的时间戳，而不执行任何规则的命令

	-n：只显示Makefile中的命令，但不真正执行，可查看Makefile的执行过程。
	-s：不显示Makefile中的任何命令，但这些命令会执行到。
	-i：忽略所有命令的错误。
	-k：当前命令有错误时，继续执行其它的。
	-w：执行Makefile时，输出目录信息。

	变量“ CURDIR”，代表 make 的工作目录。注:如果在Makefile 中没有对此变量进行显式的赋值操作，那么它代表 make 的工作目录。

	变量“ MAKE”一般表示 make
	变量“ MAKE”的这个特点是：在规则的命令行中如果使用变量“ MAKE”，标志“ -t”、“ -n”和“ -q”在这个命令的执行中不起作用。同时，执行 make 的命令行选项参数(如 -t、-n 等参数）被通过一个变量“MAKEFLAGS”传递给子目录下的 make 程序。如使用 make 代替变量“ MAKE”，则选项参数不会被传到子目录下的 make 程序

	两个特殊的变量“ SHELL”和“ MAKEFLAGS”，对于这两个变量除非使用指示符“ unexport”对它们进行声明，它们在整个 make 的执行过程中始终被自动的传递给所有的子 make。如果变量“ MAKEFILES”有值（不为空）那么同样它会被自动的传递给子 make。

	“ -C”、“ -f”、“ -o”和“ -W”。 这些命令行选项是不会被赋值给变量“ MAKEFLAGS”的。

	需要将一个在上层定义的变量传递给子 make，应该在上层 Makefile 中使用指示符“ export”对此变量进行声明。
	当不希望将一个变量传递给子 make 时，可以使用指示符“ unexport”来声明这个变量。

	export 会传递所有的变量（新版取消了），但名字中包含其它字符（除字母、数字和下划线以外的字符）的变量需要明确的使用“ export”指示符对它进行声明

	如果想要上一条命令的结果作用下一条命令，那么这两条命令就应该写在一行，以分号分隔，如果这两条命令独立成行的话，结果就大不同了，因为命令以行为单位，在一个独立的子进程中执行
	例：
	showcur: 
    	cd /home 
   		pwd 
	showhome: 
    	cd /home; pwd
    showcur的结果：pwd输出当前目录，showhome的结果：pwd输出home目录

    变量拼接：
    A := a 
	B := b 
	ab := "vars" 
	multivar: 
	    echo $($(A)$(B))
	输出为 vars

	局部变量：
	globalvar := "global" 
	local: globalvar := "local" 
	local: 
	    echo $(globalvar)

	local2: 
	    echo $(globalvar)
	local目标输出 local ；local2目标输出 global ；因为globalvar变量在目标local中被临时替换为 local ，此时 globalvar 为局部变量

	Makefile变量：
		变量“ CURDIR”，代表 make 的工作目录。
		变量“ MAKE”一般表示 make
		VPATH 变量用于指定makefile的文件目录(如源文件)
		环境变量MAKEFILES，类似与 include ，会对所有的 make 起影响
		环境变量“ MAKEFLAGS ”用于传递 make 的参数，可以向子 makefile 传递参数
		变量“ MAKELEVEL”代表了调用的深度
		nullstring表示空变量


	特殊变量
		“MAKEFILES”：make在执行时，首先读取的是环境变量“MAKEFILES”所指定的文件列表，之后才是工作目录下的Makefile文件，“include”所指定的文件是在make发现此关键字的时，暂停正在读取的文件而转去读取“include”所指定的文件。

		“MAKEFILE_LIST”：make程序在读取多个Makefile文件时，包括由环境变量“MAKEFILES”指定的、命令行指定的、当前工作目录下默认的以及使用关键字“include”包含的，在对这些文件进行解析执行之前make读取的文件名将会被自动依次追加到变量“MAKEFILE_LIST”中。

		“.VARIABLES”：此变量不能通过任何途经给它赋值，展开以后是此引用点之前、Makefile文件中所定义的所有全局变量列表，包括空变量（未赋值的变量）和make的内嵌变量，但不包含目标指定的变量，目标指定的变量值在特定目标的上下文有效。

		“.LIBPATTERNS”：值为“lib%.so lib%.a”，用于库文件的展开，例如“-lC”展开为“libC.so libC.a”

		“SHELL”：shell路径。

		“CURDIR”：make当前工作目录。

		“MAKE”：值为“make”

		“MAKEFLAGS”：make命令参数。

		“MAKEOVERRIDES”：命令行中变量定义。

		“MAKELEVEL”：递归调用make深度。

		“MAKCMDGOALS”：此变量记录了命令行参数指定的终极目标列表，没有通过参数指定终极目标时此变量为空。

	下面是几个代表命令的变量：
		AR：函数库打包程序，可创建静态库.a文档。默认是“ar”。

		AS：汇编程序。默认是“as”。

		CC： C编译程序。默认是“cc”。

		CXX：C++编译程序。默认是“g++”。

		CO：从RCS中提取文件的程序。默认是“co”。

		CPP：C程序的预处理器（输出是标准输出设备）。默认是“$(CC) -E”。

		FC：编译器和预处理Fortran和Ratfor源文件的编译器。默认是“f77”。

		GET：从SCCS中提取文件程序。默认是“get”。

		LEX：将Lex语言转变为C或Ratfo的程序。默认是“lex”。

		PC：Pascal语言编译器。默认是“pc”。

		YACC：Yacc文法分析器（针对于C程序）。默认命令是“yacc”。

		YACCR：Yacc文法分析器（针对于Ratfor程序）。默认是“yacc -r”。

		MAKEINFO：转换Texinfo源文件（.texi）到Info文件程序。默认是“makeinfo”。

		TEX：从TeX源文件创建TeX DVI文件的程序。默认是“tex”。

		TEXI2DVI：从Texinfo源文件创建TeX DVI文件的程序。默认是“texi2dvi”。

		WEAVE：转换Web到TeX的程序。默认是“weave”。

		CWEAVE：转换C Web到TeX的程序。默认是“cweave”。

		TANGLE：转换Web到Pascal语言的程序。默认是“tangle”。

		CTANGLE：转换C Web 到 C。默认是“ctangle”。

		RM：删除命令。默认是“rm -f”。

	下面是几个代表命令参数的变量：
		ARFLAGS：执行“AR”命令的命令行参数。默认值是“rv”。

		ASFLAGS：执行汇编语器“AS”的命令行参数（明确指定“.s”或“.S”文件时）。

		CFLAGS：执行“CC”编译器的命令行参数（编译.c源文件的选项）。

		CXXFLAGS：执行“g++”编译器的命令行参数（编译.cc源文件的选项）。

		COFLAGS：执行“co”的命令行参数（在RCS中提取文件的选项）。

		CPPFLAGS：执行C预处理器“cc -E”的命令行参数（C 和 Fortran 编译器会用到）。

		FFLAGS：Fortran语言编译器“f77”执行的命令行参数（编译Fortran源文件的选项） 。

		GFLAGS：SCCS “get”程序参数。 LDFLAGS 链接器（如：“ld”）参数。

		LFLAGS：Lex文法分析器参数。 PFLAGS Pascal语言编译器参数。

		RFLAGS：Ratfor 程序的Fortran 编译器参数。

		YFLAGS：Yacc文法分析器参数。

		“.PHONY”： 目标“.PHONY”所有的依赖称为伪目标，当使用make命令指定此目标时，无条件执行这个目标所在规则定义的命令。

	特殊目标
		“.SUFFIXES” : 目标“.SUFFIXES”的所有依赖指出了一系列在后缀规则中需要检查的后缀名。

		“.DEFAULT”：目标“.DEFAULT”所在规则定义的命令用于重建那些没有具体规则的目标，包括显式规则和隐式规则。比如说，一个文件作为某个规则的依赖，但却不是另外一个规则的目标时，make程序无法找到重建此文件的规则，这种情况下就执行“.DEFAULT”所指定的命令。

		“.PRECIOUS”：目标“.PRECIOUS”的所有依赖文件在make过程中会被特殊处理，当命令在执行过程中被中断时，make不会删除它们，包括中间文件。

		“.INTERMEDIATE”：目标“.INTERMEDIATE”的依赖文件在make时作为中间文件。

		“.SECONDARY”：目标“.SECONDARY”的依赖文件作为中间文件，但这些文件不会被自动删除，如果没有任何依赖文件时，则将所有的文件作为中间文件。

		“.DELETE_ON_ERROR”：目标“.DELETE_ON_ERROR”的依赖文件在创建时，如果对应的命令执行错误，将删除已被修改的目标文件。

		“.IGNORE”：目标“.IGNORE”指定依赖文件时，将忽略创建这些依赖文件所执行命令的错误，当此目标没有依赖文件时，将忽略所有命令执行的错误。

		“.LOW_RESOLUTION_TIME”：目标“.LOW_RESOLUTION_TIME”的依赖文件被make认为是低分辨率时间戳
		文件，通常，文件的时间辍都是高分辨率的，make在处理依赖关系时，对规则的目标-依赖文件的时间戳进行比较，判断目标是否过期。

		“.SILENT”：目标“.SILENT”的依赖文件在创建时，不打印重建此文件所执行的命令，若没有任何依赖文件，则告诉make在执行过程中不打印任何执行的命令。

		“.EXPORT_ALL_VARIABLES”：目标“.EXPORT_ALL_VARIABLES”应该作为一个简单的没有依赖的目标，它的功能是将之后所有的变量传递给子make进程。

		“.NOPARALLEL”：目标“.NOPARALLEL”的所有命令按照串行方式执行，即使存在make的命令行参数“-j”，也串行执行，但在递归调用的子make进程中，命令可以并行执行。此目标不应该有依赖文件，所有出现的依赖文件将被忽略。

	延时变量和立即变量：
		A  =  xxx   // 延时变量
		B  ?= xxx    // 延时变量，只有第一次定义时赋值才成功；如果曾定义过，此赋值无效
		C  := xxx    // 立即变量
		D  += yyy   // 如果D在前面是延时变量，那么现在它还是延时变量；
		// 如果D在前面是立即变量，那么现在它还是立即变量

		延时变量：它的值在使用时才展开、才确定。比如
			A  =  $@
			test:
				@echo $A
			上述Makefile中，变量A的值在执行时才确定，它等于test，是延时变量。
			如果使用“A := $@”，这是立即变量，这时$@为空，所以A的值就是空。

		立即变量：它的值在赋值时就展开、确定

		make -C $@ -f $(TOPDIR)/Makefile.build 	//虽然跳到了TOPDIR去执行Makefile.build但执行Makefile.build时当前目录依然 $@ 目录

		Makefile.build是一个位于顶层目录，用于指定每个目录的编译规则的文件
		Makefile.build利用了一种递归编译的思想
}
在ubuntu执行make的结果（韦东山的通用make）
NanoPC-T4# make
make -C ./ -f /home/aqin/source/05_general_Makefile/example/Makefile.build
make[1]: Entering directory '/home/aqin/source/05_general_Makefile/example'
make -C a -f /home/aqin/source/05_general_Makefile/example/Makefile.build
make[2]: Entering directory '/home/aqin/source/05_general_Makefile/example/a'
gcc -Wall -O2 -g -I /home/aqin/source/05_general_Makefile/example/include -D DEBUG  -Wp,-MD,.sub2.o.d -c -o sub2.o sub2.c
gcc -Wall -O2 -g -I /home/aqin/source/05_general_Makefile/example/include -D DEBUG -D DEBUG_SUB3 -Wp,-MD,.sub3.o.d -c -o sub3.o sub3.c
ld -r -o built-in.o sub2.o sub3.o
make[2]: Leaving directory '/home/aqin/source/05_general_Makefile/example/a'
gcc -Wall -O2 -g -I /home/aqin/source/05_general_Makefile/example/include   -Wp,-MD,.main.o.d -c -o main.o main.c
gcc -Wall -O2 -g -I /home/aqin/source/05_general_Makefile/example/include   -Wp,-MD,.sub.o.d -c -o sub.o sub.c
ld -r -o built-in.o main.o sub.o a/built-in.o
make[1]: Leaving directory '/home/aqin/source/05_general_Makefile/example'
gcc  -o test built-in.o
test has been built!






























